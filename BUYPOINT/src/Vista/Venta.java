package Vista;

//import com.sun.jdi.connect.spi.Connection;
import Conexiones.Conexion;
import Controlador.VentaController;
import Modelo.DetalleVenta;
import Modelo.ReporteVenta;
import java.sql.PreparedStatement;
import java.awt.Dimension;
import java.awt.Image;
//import java.beans.Statement;
import java.sql.SQLException;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

public class Venta extends javax.swing.JInternalFrame {

    // Modelo de datos
    private DefaultTableModel modeloDatosProductos;

    //Lista para el detalle de venta de los productos
    ArrayList<DetalleVenta> listaProductos = new ArrayList<>();
    private DetalleVenta producto;

    private int idCliente = 0;

    private String idProducto = "";
    private String nombre = "";
    private int cantidadProductoBBDD = 0;
    private double precioUnitario = 0.0;
    private int porcentajeIva = 0;

    private int cantidad = 0; //cantidad de productos a comprar
    private double subtotal = 0.0; //Cantidad por precio
    private double descuento = 0.0;
    private double iva = 0.0;
    private double totalPagar = 0.0;

    // Variables para calculos globales
    private double subtotalGeneral = 0;
    private double descuentoGeneral = 0;
    private double ivaGeneral = 0;
    private double totalPagarGeneral = 0;
    // Fin de variables de calculos globales

    private int auxIdDetalle = 1;//Id del detalle de venta

    public Venta() {
        initComponents();
        this.setClosable(true);
        this.setMaximizable(true);
        this.setIconifiable(true);
        this.setResizable(true);
        this.setSize(new Dimension(900, 650));
        this.setTitle("Venta");

        // Cargar los clientes
        this.cargarClientes();
        this.cargarProductos();
        this.inicializarTablaProductos();

        txt_Efectivo.setEnabled(false);
        btn_Calcular.setEnabled(false);

        txt_Subtotal.setText("0.0");
        txt_IVA.setText("0.0");
        txt_Descuento.setText("0.0");
        txt_Toltal.setText("0.0");

        ImageIcon wallpaper = new ImageIcon("src/Img/fondo3.jpg");
        Image img = wallpaper.getImage();
        Image scaled = img.getScaledInstance(860, 560, Image.SCALE_SMOOTH);
        jlabel_imagen.setIcon(new ImageIcon(scaled));

    }

    // Metodo para iniciar la tabla de los productos
    private void inicializarTablaProductos() {
        modeloDatosProductos = new DefaultTableModel();
        //añadir columnas
        modeloDatosProductos.addColumn("N");
        modeloDatosProductos.addColumn("Nombre");
        modeloDatosProductos.addColumn("Cantidad");
        modeloDatosProductos.addColumn("P. Unitario");
        modeloDatosProductos.addColumn("Subtotal");
        modeloDatosProductos.addColumn("Descuento");
        modeloDatosProductos.addColumn("IVA");
        modeloDatosProductos.addColumn("Total Pagar");
        modeloDatosProductos.addColumn("Accion");
        // Agregar los datos del modelo a la tabla
        this.jTable_Productos.setModel(modeloDatosProductos);

    }

    // Metodo para presentar la info de la tabla DetalleVenta
    private void ListaTablaProductos() {
        this.modeloDatosProductos.setRowCount(listaProductos.size());
        for (int i = 0; i < listaProductos.size(); i++) {
            this.modeloDatosProductos.setValueAt(i + 1, i, 0);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getNombre(), i, 1);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getCantidad(), i, 2);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getPrecioUnitario(), i, 3);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getSubtotal(), i, 4);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getDescuento(), i, 5);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getIva(), i, 6);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getTotalAPagar(), i, 7);
            this.modeloDatosProductos.setValueAt("Eliminar", i, 8);
        }
        // Añadir a la tabla
        jTable_Productos.setModel(modeloDatosProductos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox_Cliente = new javax.swing.JComboBox<>();
        JComboBox_Producto = new javax.swing.JComboBox<>();
        txtBuscar_Cliente = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();
        btn_Buscar_Cliente = new javax.swing.JButton();
        btnAnadirProducto = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Productos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txt_Subtotal = new javax.swing.JTextField();
        txt_Descuento = new javax.swing.JTextField();
        txt_IVA = new javax.swing.JTextField();
        txt_Toltal = new javax.swing.JTextField();
        txt_Efectivo = new javax.swing.JTextField();
        txt_Cambio = new javax.swing.JTextField();
        btn_Calcular = new javax.swing.JButton();
        btn_Regsitar_Venta = new javax.swing.JButton();
        btn_Buscar_Cliente1 = new javax.swing.JButton();
        txtBuscar_Cliente1 = new javax.swing.JTextField();
        btnBuscarProducto = new javax.swing.JButton();
        txtBuscarProducto = new javax.swing.JTextField();
        jlabel_imagen = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setPreferredSize(new java.awt.Dimension(900, 650));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Venta");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Cliente:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 88, 55, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Cantidad:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 136, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("IdProducto:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 136, -1, -1));

        jComboBox_Cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione cliente:", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(jComboBox_Cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 88, 155, -1));

        JComboBox_Producto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione producto:", "Item 2", "Item 3", "Item 4" }));
        JComboBox_Producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JComboBox_ProductoActionPerformed(evt);
            }
        });
        getContentPane().add(JComboBox_Producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 136, 155, -1));
        getContentPane().add(txtBuscar_Cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(272, 88, 112, -1));
        getContentPane().add(txtCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 136, 70, -1));

        btn_Buscar_Cliente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_Buscar_Cliente.setText("Buscar");
        btn_Buscar_Cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Buscar_ClienteActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Buscar_Cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 88, -1, -1));

        btnAnadirProducto.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAnadirProducto.setText("Añadir Producto");
        btnAnadirProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnadirProductoActionPerformed(evt);
            }
        });
        getContentPane().add(btnAnadirProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 136, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_Productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_Productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_ProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_Productos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 820, 160));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 840, 180));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("SubTotal:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Descuento:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("IVA:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Total a pagar:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("Efectivo:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setText("Cambio:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, -1));

        txt_Subtotal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txt_Subtotal.setEnabled(false);
        jPanel2.add(txt_Subtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 140, -1));

        txt_Descuento.setEnabled(false);
        jPanel2.add(txt_Descuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 140, -1));

        txt_IVA.setEnabled(false);
        jPanel2.add(txt_IVA, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 140, -1));

        txt_Toltal.setEnabled(false);
        jPanel2.add(txt_Toltal, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, 140, -1));
        jPanel2.add(txt_Efectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 140, 140, -1));

        txt_Cambio.setEnabled(false);
        jPanel2.add(txt_Cambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, 140, -1));

        btn_Calcular.setBackground(new java.awt.Color(0, 204, 204));
        btn_Calcular.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_Calcular.setText("Calcular");
        btn_Calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CalcularActionPerformed(evt);
            }
        });
        jPanel2.add(btn_Calcular, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 150, 120, 40));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 360, 420, 200));

        btn_Regsitar_Venta.setBackground(new java.awt.Color(0, 204, 204));
        btn_Regsitar_Venta.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_Regsitar_Venta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/reportes.png"))); // NOI18N
        btn_Regsitar_Venta.setText("Registrar Venta");
        btn_Regsitar_Venta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_Regsitar_Venta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btn_Regsitar_Venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Regsitar_VentaActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Regsitar_Venta, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 370, 230, 100));

        btn_Buscar_Cliente1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_Buscar_Cliente1.setText("Buscar");
        btn_Buscar_Cliente1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Buscar_Cliente1ActionPerformed(evt);
            }
        });
        getContentPane().add(btn_Buscar_Cliente1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 88, -1, -1));
        getContentPane().add(txtBuscar_Cliente1, new org.netbeans.lib.awtextra.AbsoluteConstraints(272, 88, 112, -1));

        btnBuscarProducto.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBuscarProducto.setText("Buscar");
        btnBuscarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarProductoActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 136, -1, -1));
        getContentPane().add(txtBuscarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 136, 112, -1));

        jlabel_imagen.setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jlabel_imagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 870, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_Buscar_ClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Buscar_ClienteActionPerformed
        String clientebuscar = txtBuscar_Cliente.getText().trim();
        Connection cn = Conexion.conectar();
        String sql = "SELECT nombre, apellido FROM cliente WHERE cedula = ?";  // Corregir la consulta SQL

        try {
            PreparedStatement pst = cn.prepareStatement(sql);
            pst.setString(1, clientebuscar);  // Usar PreparedStatement para evitar inyección SQL

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                // Si se encuentra el cliente, se establece en el combo
                jComboBox_Cliente.setSelectedItem(rs.getString("nombre") + " " + rs.getString("apellido"));
            } else {
                // Si no se encuentra el cliente, se muestra un mensaje y se reinicia el combo
                jComboBox_Cliente.setSelectedItem("Seleccione cliente: ");
                JOptionPane.showMessageDialog(null, "!Cédula de cliente incorrecta o no encontrada!");
            }

            // Limpiar el campo de búsqueda
            txtBuscar_Cliente.setText("");

            // Cerrar la conexión
            cn.close();

        } catch (SQLException ex) {
            System.out.println("Error al buscar cliente: " + ex);
        }

    }//GEN-LAST:event_btn_Buscar_ClienteActionPerformed

    private void JComboBox_ProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JComboBox_ProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JComboBox_ProductoActionPerformed

    private void btn_Buscar_Cliente1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Buscar_Cliente1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_Buscar_Cliente1ActionPerformed

    private void btnBuscarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarProductoActionPerformed
        String buscarPro = txtBuscarProducto.getText().trim();
        if (buscarPro.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor ingrese un ID de producto.");
            return;
        }
        Connection cn = Conexion.conectar();
        String sql = "SELECT nombre FROM Producto WHERE IdProducto = ?";

        try {
            PreparedStatement pst = cn.prepareStatement(sql);
            pst.setString(1, buscarPro);  // Se asigna el valor de buscarPro de forma segura

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                // Si se encuentra el producto, se establece en el combo
                JComboBox_Producto.setSelectedItem(rs.getString("nombre"));
            } else {
                // Si no se encuentra, se muestra un mensaje y se reinicia el combo
                JComboBox_Producto.setSelectedItem("Seleccione Producto:");
                JOptionPane.showMessageDialog(null, "¡Producto no encontrado!");
            }

            // Limpiar el campo de búsqueda
            txtBuscarProducto.setText("");

            // Cerrar la conexión
            cn.close();

        } catch (SQLException ex) {
            System.out.println("Error al buscar Producto: " + ex);
        }

    }//GEN-LAST:event_btnBuscarProductoActionPerformed

    private void btnAnadirProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnadirProductoActionPerformed

        String combo = this.JComboBox_Producto.getSelectedItem().toString();
        // Validar que seleccion un produtco
        if (combo.equalsIgnoreCase("Seleccione producto:")) {
            JOptionPane.showMessageDialog(null, "Seleccione un producto");
        } else {
            // Validar que ingrese una cantidad
            if (!txtCantidad.getText().isEmpty()) {
                //Validar que ingrese numero en cantidad
                boolean validacion = validar(txtCantidad.getText());
                if (validacion) {
                    // Validar cantidad mayor a 0
                    if (Integer.parseInt(txtCantidad.getText()) > 0) {
                        cantidad = Integer.parseInt(txtCantidad.getText());
                        // Ejecutar el metodo para obtener datos del producto
                        this.datosDelProducto();
                        //Validar que la cantidad de productos seleccionado no sea mayor al stock disponible
                        if (cantidad <= cantidadProductoBBDD) {

                            subtotal = precioUnitario * cantidad;
                            totalPagar = subtotal + iva + descuento;

                            // Redondear decimales
                            subtotal = (double) Math.round(subtotal * 100) / 100;
                            iva = (double) Math.round(iva * 100) / 100;
                            descuento = (double) Math.round(descuento * 100) / 100;
                            totalPagar = (double) Math.round(totalPagar * 100) / 100;

                            // Se crea un nuevo producto
                            producto = new DetalleVenta(auxIdDetalle,
                                    1,
                                    idProducto,
                                    nombre,
                                    Integer.parseInt(txtCantidad.getText()),
                                    precioUnitario,
                                    subtotal,
                                    descuento,
                                    iva,
                                    totalPagar,
                                    1
                            );
                            // Añadir a la lista
                            listaProductos.add(producto);
                            JOptionPane.showMessageDialog(null, "Producto agregado");
                            auxIdDetalle++;
                            txtCantidad.setText("");
                            // Volver a cargar combo productos
                            this.cargarProductos();
                            this.calcularTotalPagar();
                            txt_Efectivo.setEnabled(true);
                            btn_Calcular.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(null, "La cantidad supera el stock");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad no pude ser cero ni negativa");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Ingrese un valor valido");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Ingrese la cantidad de producto");
            }

            this.ListaTablaProductos();
        }


    }//GEN-LAST:event_btnAnadirProductoActionPerformed

    private void btn_CalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CalcularActionPerformed
        if (!txt_Efectivo.getText().isEmpty()) {
            // Validamaos que el usuario no ingrese otros caracteres no numericos
            boolean validacion = validarDouble(txt_Efectivo.getText());
            if (validacion) {
                // Validar que el efectivo sea mayor a 0
                double efc = Double.parseDouble(txt_Efectivo.getText().trim());
                double top = Double.parseDouble(txt_Toltal.getText().trim());

                if (efc < top) {
                    JOptionPane.showMessageDialog(null, "El dinero en efectivo no es suficiente");
                } else {
                    double cambio = efc - top;
                    double cambi = (double) Math.round(cambio * 100) / 100;
                    String camb = String.valueOf(cambi);
                    txt_Cambio.setText(camb);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingrese un valor valido");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese dinero en efectivo para calcular cambio");
        }

    }//GEN-LAST:event_btn_CalcularActionPerformed

    int idArrayList = 0;

    private void jTable_ProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_ProductosMouseClicked

        int filaPoint = jTable_Productos.rowAtPoint(evt.getPoint());
        int columnaPoint = 0;

        if (filaPoint > -1) {
            idArrayList = (int) modeloDatosProductos.getValueAt(filaPoint, columnaPoint);
        }

        int opcion = JOptionPane.showConfirmDialog(null, "¿Eliminar el producto?");
        // opciones de confirm dialog - (si = 0; no = 1; cancel = 2; close = -1;
        switch (opcion) {
            case 0: //presione si
                listaProductos.remove(idArrayList - 1);
                this.calcularTotalPagar();
                this.ListaTablaProductos();
                break;
            case 1: // Presione no
                break;
            default:  // Si presion cancel o close5
                break;
        }


    }//GEN-LAST:event_jTable_ProductosMouseClicked

    private void btn_Regsitar_VentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Regsitar_VentaActionPerformed

       VentaController controlVenta = new VentaController();

    String fechaActual = new SimpleDateFormat("yyyy/MM/dd").format(new Date());

    if (!jComboBox_Cliente.getSelectedItem().equals("Seleccione cliente:")) {
        if (listaProductos.size() > 0) {
            
            this.obtenerIdCliente(); // aún es necesario para obtener el ID

            ReporteVenta reporte = new ReporteVenta();
            reporte.setIdIdReporteVenta(0);
            reporte.setIdCliente(idCliente);
            reporte.setValorPagar(Double.parseDouble(txt_Toltal.getText()));
            reporte.setFechaVenta(fechaActual);
            reporte.setEstado(1);

            // Convertir lista a arreglo
            DetalleVenta[] detallesArray = listaProductos.toArray(new DetalleVenta[0]);

            if (controlVenta.registrarVenta(reporte, detallesArray)) {
                JOptionPane.showMessageDialog(null, "Venta registrada con éxito");

                // Limpiar campos y actualizar datos
                txt_Subtotal.setText("");
                txt_Descuento.setText("");
                txt_IVA.setText("");
                txt_Toltal.setText("");
                txt_Efectivo.setText("");
                txt_Cambio.setText("0.0");
                auxIdDetalle = 1;

                this.cargarClientes();
                this.cargarProductos();

                // Restar stock
                for (DetalleVenta elemento : listaProductos) {
                    this.restarStockProductos(elemento.getIdProducto(), elemento.getCantidad());
                }

                listaProductos.clear();
                ListaTablaProductos();
            } else {
                JOptionPane.showMessageDialog(null, "Error al registrar la venta");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Seleccione al menos un producto");
        }
    } else {
        JOptionPane.showMessageDialog(null, "Seleccione un cliente");
    }

    }//GEN-LAST:event_btn_Regsitar_VentaActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Venta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Venta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Venta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Venta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Venta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> JComboBox_Producto;
    private javax.swing.JButton btnAnadirProducto;
    private javax.swing.JButton btnBuscarProducto;
    private javax.swing.JButton btn_Buscar_Cliente;
    private javax.swing.JButton btn_Buscar_Cliente1;
    private javax.swing.JButton btn_Calcular;
    private javax.swing.JButton btn_Regsitar_Venta;
    private javax.swing.JComboBox<String> jComboBox_Cliente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_Productos;
    private javax.swing.JLabel jlabel_imagen;
    private javax.swing.JTextField txtBuscarProducto;
    private javax.swing.JTextField txtBuscar_Cliente;
    private javax.swing.JTextField txtBuscar_Cliente1;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txt_Cambio;
    private javax.swing.JTextField txt_Descuento;
    private javax.swing.JTextField txt_Efectivo;
    private javax.swing.JTextField txt_IVA;
    private javax.swing.JTextField txt_Subtotal;
    private javax.swing.JTextField txt_Toltal;
    // End of variables declaration//GEN-END:variables

//Metodo para cargar clientes
    private void cargarClientes() {
        Connection cn = Conexion.conectar();
        String sql = "select * from Cliente";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            jComboBox_Cliente.removeAllItems();
            jComboBox_Cliente.addItem("Seleccione cliente:");

            while (rs.next()) {
                jComboBox_Cliente.addItem(rs.getString("nombre") + " " + rs.getString("apellido"));
            }
            cn.close();
        } catch (SQLException ex) {

            System.out.println("Error al cargar clientes" + ex);
        }

    }

    //Metodo para cargar productos
    private void cargarProductos() {

        Connection cn = Conexion.conectar();
        String sql = "select * from Producto";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            JComboBox_Producto.removeAllItems();
            JComboBox_Producto.addItem("Seleccione Producto:");

            while (rs.next()) {
                JComboBox_Producto.addItem(rs.getString("Nombre"));
            }
            cn.close();
        } catch (SQLException ex) {

            System.out.println("Error al cargar productos" + ex);
        }
    }

    // Metodo para validar que el usuario no ingrese caracteres no nnumericos
    private boolean validar(String vslor) {
        try {
            int num = Integer.parseInt(vslor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    // Metodo para validar que el usuario no ingrese caracteres no nnumericos
    private boolean validarDouble(String vslor) {
        try {
            double num = Double.parseDouble(vslor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    //Metodo para mostrar los datos del produto
    private void datosDelProducto() {
        try {
            String sql = "select * from Producto where nombre = '" + this.JComboBox_Producto.getSelectedItem() + "'";
            Connection cn = Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                idProducto = rs.getString("IdProducto");
                nombre = rs.getString("nombre");
                cantidadProductoBBDD = rs.getInt("cantidad");
                precioUnitario = rs.getDouble("precio");
                porcentajeIva = rs.getInt("porcentajeIva");
                this.calcularIva(precioUnitario, porcentajeIva);// Calcula el IVA
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener datos del producto" + e);
        }
    }

    // Metodo para calcular el IVA
    private double calcularIva(double precio, int porcentajeIva) {
        int pIva = porcentajeIva;

        switch (pIva) {
            case 0:
                iva = 0.0;
                break;
            case 16:
                iva = (precio * cantidad) * 0.16;
                break;
            default:
                break;
        }
        return iva;
    }

    // Metodo para calcular total a pagar de todos los productos
    private void calcularTotalPagar() {
        subtotalGeneral = 0;
        descuentoGeneral = 0;
        ivaGeneral = 0;
        totalPagarGeneral = 0;

        for (DetalleVenta elemento : listaProductos) {
            subtotalGeneral += elemento.getSubtotal();
            descuentoGeneral += elemento.getDescuento();
            ivaGeneral += elemento.getIva();
            totalPagarGeneral += elemento.getTotalAPagar();
        }
        // Redondear decimales
        subtotalGeneral = (double) Math.round(subtotalGeneral * 100) / 100;
        ivaGeneral = (double) Math.round(ivaGeneral * 100) / 100;
        descuentoGeneral = (double) Math.round(descuentoGeneral * 100) / 100;
        totalPagarGeneral = (double) Math.round(totalPagarGeneral * 100) / 100;

        // Enviar datos a la lista
        txt_Subtotal.setText(String.valueOf(subtotalGeneral));
        txt_IVA.setText(String.valueOf(ivaGeneral));
        txt_Descuento.setText(String.valueOf(descuentoGeneral));
        txt_Toltal.setText(String.valueOf(totalPagarGeneral));
    }

    // Metodo para obtener id del cliente
    private void obtenerIdCliente() {
        try {
            String sql = "select * from cliente where concat(nombre, ' ',apellido) = '" + this.jComboBox_Cliente.getSelectedItem() + "'";
            Connection cn = Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                idCliente = rs.getInt("IdCliente");
            }

        } catch (SQLException e) {
            System.out.println("Error al obtener Id del cliente" + e);
        }

    }

    // actualizar el stock cuando se realiza una venta
    private void restarStockProductos(String idPro, int cantidad) {
        int cantidadProductosBD = 0;
        try {
            Connection cn = Conexion.conectar();
            String sql = "select IdProducto, cantidad from Producto where IdProducto = '" + idPro + "'";
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                cantidadProductosBD = rs.getInt("cantidad");

            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al actualizar stock 2");
        }

        try {
            Connection cn = Conexion.conectar();
            PreparedStatement consulta = cn.prepareStatement("update Producto "
                    + "set cantidad = ? where IdProducto = '" + idPro +"'");
            int CantidadNueva = cantidadProductosBD - cantidad;
            consulta.setInt(1, CantidadNueva);
            if(consulta.executeUpdate()>0){
                System.out.println("Todo bien");
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al actualizar stock 1");
        }

    }

}
